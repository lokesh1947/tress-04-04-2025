//Given a binary tree. Check whether the given tree is a Sum-binary Tree or not.
/*Sum-binary Tree is a Binary Tree where the value of a every node is equal to sum of the nodes present in its left subtree and right subtree.
An empty tree is Sum-binary Tree and sum of an empty tree can be considered as 0. A leaf node is also considered as SumTree.*/
//Return 1 if it sum-binary tree else return 0.


import java.util.*;
class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) {
        val = x;
        left = right = null;
    }
}

public class Solution {
    public int solve(TreeNode A) {
        if (isSumTree(A).isSumTree) {
            return 1;
        }
        return 0;
    }

    private Pair isSumTree(TreeNode node) {
        if (node == null) {
            return new Pair(true, 0);
        }
        if (node.left == null && node.right == null) {
            return new Pair(true, node.val);
        }

        Pair left = isSumTree(node.left);
        Pair right = isSumTree(node.right);

        boolean isSum = left.isSumTree && right.isSumTree && (node.val == left.sum + right.sum);
        int totalSum = node.val + left.sum + right.sum;

        return new Pair(isSum, totalSum);
    }

    private class Pair {
        boolean isSumTree;
        int sum;

        Pair(boolean isSumTree, int sum) {
            this.isSumTree = isSumTree;
            this.sum = sum;
        }
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(26);
        root.left = new TreeNode(10);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(6);
        root.right.right = new TreeNode(3);
        Solution sol = new Solution();
        int result = sol.solve(root);
        System.out.println(result);  
    }
}
