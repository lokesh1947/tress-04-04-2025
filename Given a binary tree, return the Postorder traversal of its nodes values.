//Create Given a binary tree, return the Postorder traversal of its nodes values.

import java.util.*;
class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) {
        val = x;
        left = right = null;
    }
}
public class Solution {
    public int[] postorderTraversal(TreeNode A) {
        List<Integer> result = new ArrayList<>();
        postorderHelper(A, result);
        int[] res = new int[result.size()];
        for (int i = 0; i < result.size(); i++) {
            res[i] = result.get(i);
        }
        return res;
    }

    private void postorderHelper(TreeNode node, List<Integer> result) {
        if (node == null) {
            return;
        }
        postorderHelper(node.left, result);
        postorderHelper(node.right, result);
        result.add(node.val);
    }

    public static void main(String[] args) {
    
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);

        Solution solution = new Solution();
        int[] postorder = solution.postorderTraversal(root);

        System.out.println("Postorder Traversal:");
        for (int val : postorder) {
            System.out.print(val + " ");
        }
    }
}
